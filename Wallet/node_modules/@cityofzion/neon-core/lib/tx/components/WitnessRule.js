import { parseEnum } from "../../internal";
import { CalledByEntryWitnessCondition, WitnessCondition, } from "./WitnessCondition";
export var WitnessRuleAction;
(function (WitnessRuleAction) {
    WitnessRuleAction[WitnessRuleAction["Deny"] = 0] = "Deny";
    WitnessRuleAction[WitnessRuleAction["Allow"] = 1] = "Allow";
})(WitnessRuleAction || (WitnessRuleAction = {}));
export class WitnessRule {
    constructor(input = {}) {
        this.action =
            input.action !== undefined
                ? parseEnum(input.action, WitnessRuleAction)
                : WitnessRuleAction.Deny;
        this.condition =
            input.condition !== undefined
                ? input.condition instanceof WitnessCondition
                    ? input.condition
                    : WitnessCondition.fromJson(input.condition)
                : new CalledByEntryWitnessCondition();
    }
    get size() {
        return 1 + this.condition.size;
    }
    static deserialize(ss) {
        const action = parseEnum(ss.read(1), WitnessRuleAction);
        const condition = WitnessCondition.deserialize(ss);
        return new WitnessRule({ action, condition });
    }
    static fromJson(input) {
        return new WitnessRule(input);
    }
    serialize() {
        return (this.action.toString(16).padStart(2, "0") + this.condition.serialize());
    }
    toJson() {
        return {
            action: WitnessRuleAction[this.action],
            condition: this.condition.toJson(),
        };
    }
}
//# sourceMappingURL=WitnessRule.js.map